{
    "docs": [
        {
            "location": "/index.html", 
            "text": "mPulseAPI\n\n\nmodule \nmPulseAPI\n\n\nmPulseAPI.jl#16\n\n\nCommunicate with the mPulse Query \n Repository REST APIs to fetch information about tenants and apps.\n\n\nDocumentation\n\n\nThis module:\n\n\n\n\nmPulseAPI.jl: \nhttps://soasta.github.io/mPulseAPI.jl/\n\n\n\n\nREST APIs that this module uses:\n\n\n\n\nmPulse Query API: \nhttp://docs.soasta.com/query-api/\n\n\nSOASTA Repository API: \nhttp://docs.soasta.com/repository-api/\n\n\n\n\nQuick and dirty usage\n\n\nThis snippet will get you up and running, see the full documentation for more details.\n\n\nSee \nhow to generate an API Token\n for details about the \napiToken\n\n\nusing mPulseAPI\n\n# mPulse uses apiToken for authentication\ntoken = getRepositoryToken(\ntenant name\n, \nmPulse api token for tenant\n)\n\n\n# Get a domain by app name\ndomain = getRepositoryDomain(token, appName=\napp name from mPulse\n)\n\n# Get a domain by App ID (formerly known as API key)\ndomain = getRepositoryDomain(token, appID=\nApp ID from mPulse\n)\n\ndomain[\nattributes\n][\nappID\n]                            # Gets the App ID (formerly known as API key)\n                                                         # for this app\ndomain[\ncustom_metrics\n]                                 # Get a Dict of custom metrics\ndomain[\ncustom_metrics\n][\nConversion Rate\n]              # Get mapping for Conversion Rate custom metric\ndomain[\ncustom_metrics\n][\nConversion Rate\n][\nfieldname\n] # Get field name for Conversion Rate custom\n                                                         # metric\n\n# Get all domains in tenant\ndomains = getRepositoryDomain(token)\n\n\n# Get a tenant\ntenant = getRepositoryTenant(token, name=\ntenant name from mPulse\n)\n\n\n\n\n\n\nAPI Reference\n\n\n\n\n\n\nExceptions\n\n\n\n\nmPulseAPIException\n\n\nmPulseAPIAuthException\n\n\nmPulseAPIRequestException\n\n\nmPulseAPIResultFormatException\n\n\n\n\n\n\n\n\nRepository API\n\n\n\n\ngetRepositoryToken\n\n\ngetRepositoryDomain\n\n\ngetRepositoryTenant\n\n\n\n\n\n\n\n\nQuery API\n\n\n\n\ngetAPIResults\n\n\ngetSummaryTimers\n\n\ngetPageGroupTimers\n\n\ngetBrowserTimers\n\n\ngetABTestTimers\n\n\ngetGeoTimers\n\n\ngetMetricsByDimension\n\n\ngetTimersMetrics\n\n\ngetHistogram\n\n\ngetSessionsOverPageLoadTime\n\n\ngetMetricOverPageLoadTime\n\n\ngetTimerByMinute\n\n\nmergeMetrics\n\n\n\n\n\n\n\n\nRepository API\n\n\n\n\ngetCustomMetricMap\n\n\ngetCustomTimerMap\n\n\ngetNodeContent\n\n\n\n\n\n\n\n\nInternal Cache Utilities\n\n\n\n\nclearDomainCache\n\n\nclearTenantCache\n\n\nclearTokenCache", 
            "title": "mPulseAPI"
        }, 
        {
            "location": "/index.html#mpulseapi", 
            "text": "", 
            "title": "mPulseAPI"
        }, 
        {
            "location": "/index.html#module-mpulseapi", 
            "text": "mPulseAPI.jl#16  Communicate with the mPulse Query   Repository REST APIs to fetch information about tenants and apps.", 
            "title": "module mPulseAPI"
        }, 
        {
            "location": "/index.html#documentation", 
            "text": "", 
            "title": "Documentation"
        }, 
        {
            "location": "/index.html#this-module", 
            "text": "mPulseAPI.jl:  https://soasta.github.io/mPulseAPI.jl/", 
            "title": "This module:"
        }, 
        {
            "location": "/index.html#rest-apis-that-this-module-uses", 
            "text": "mPulse Query API:  http://docs.soasta.com/query-api/  SOASTA Repository API:  http://docs.soasta.com/repository-api/", 
            "title": "REST APIs that this module uses:"
        }, 
        {
            "location": "/index.html#quick-and-dirty-usage", 
            "text": "This snippet will get you up and running, see the full documentation for more details.  See  how to generate an API Token  for details about the  apiToken  using mPulseAPI\n\n# mPulse uses apiToken for authentication\ntoken = getRepositoryToken( tenant name ,  mPulse api token for tenant )\n\n\n# Get a domain by app name\ndomain = getRepositoryDomain(token, appName= app name from mPulse )\n\n# Get a domain by App ID (formerly known as API key)\ndomain = getRepositoryDomain(token, appID= App ID from mPulse )\n\ndomain[ attributes ][ appID ]                            # Gets the App ID (formerly known as API key)\n                                                         # for this app\ndomain[ custom_metrics ]                                 # Get a Dict of custom metrics\ndomain[ custom_metrics ][ Conversion Rate ]              # Get mapping for Conversion Rate custom metric\ndomain[ custom_metrics ][ Conversion Rate ][ fieldname ] # Get field name for Conversion Rate custom\n                                                         # metric\n\n# Get all domains in tenant\ndomains = getRepositoryDomain(token)\n\n\n# Get a tenant\ntenant = getRepositoryTenant(token, name= tenant name from mPulse )", 
            "title": "Quick and dirty usage"
        }, 
        {
            "location": "/index.html#api-reference", 
            "text": "Exceptions   mPulseAPIException  mPulseAPIAuthException  mPulseAPIRequestException  mPulseAPIResultFormatException     Repository API   getRepositoryToken  getRepositoryDomain  getRepositoryTenant     Query API   getAPIResults  getSummaryTimers  getPageGroupTimers  getBrowserTimers  getABTestTimers  getGeoTimers  getMetricsByDimension  getTimersMetrics  getHistogram  getSessionsOverPageLoadTime  getMetricOverPageLoadTime  getTimerByMinute  mergeMetrics     Repository API   getCustomMetricMap  getCustomTimerMap  getNodeContent     Internal Cache Utilities   clearDomainCache  clearTenantCache  clearTokenCache", 
            "title": "API Reference"
        }, 
        {
            "location": "/apiToken/index.html", 
            "text": "How to generate an mPulse API Token\n\n\nAn mPulse API Token is a token unique to your mPulse account that allows you to authenticate with\nthe mPulse Query and Repository APIs without sending your username and password over the network.\n\n\nA token may be revoked or regenerated at any time, but you may only have one token at any given\ntime.\n\n\nThe token is used to authenticate as you, so any script using your token has all of your privileges.\n\n\nStep 1. Sign in to mPulse\n\n\nSign in to mPulse by visiting \nhttps://mpulse.soasta.com/\n and entering\nyour username and password:\n\n\n\n\nStep 2. Visit your Account Settings\n\n\nAfter signing in, click on your name in the top right corner to show the User Menu, and select\nAccount from there:\n\n\n\n\nStep 3. Generate a new API Token\n\n\nIn your account settings page, the first section contains your personal information, and has options\nto Change your password and Generate/Revoke your API Token.\n\n\nIf you don't already have an API Token generated, click the \nGenerate\n link:\n\n\n\n\nStep 4. Copy the API Token\n\n\nYou should now have an API Token in the text field labelled \nAPI Token\n.  Copy this out and use it\nfor the \nmPulseAPI.generateRepositoryToken\n call.", 
            "title": "How to generate an API Token"
        }, 
        {
            "location": "/apiToken/index.html#how-to-generate-an-mpulse-api-token", 
            "text": "An mPulse API Token is a token unique to your mPulse account that allows you to authenticate with\nthe mPulse Query and Repository APIs without sending your username and password over the network.  A token may be revoked or regenerated at any time, but you may only have one token at any given\ntime.  The token is used to authenticate as you, so any script using your token has all of your privileges.", 
            "title": "How to generate an mPulse API Token"
        }, 
        {
            "location": "/apiToken/index.html#step-1-sign-in-to-mpulse", 
            "text": "Sign in to mPulse by visiting  https://mpulse.soasta.com/  and entering\nyour username and password:", 
            "title": "Step 1. Sign in to mPulse"
        }, 
        {
            "location": "/apiToken/index.html#step-2-visit-your-account-settings", 
            "text": "After signing in, click on your name in the top right corner to show the User Menu, and select\nAccount from there:", 
            "title": "Step 2. Visit your Account Settings"
        }, 
        {
            "location": "/apiToken/index.html#step-3-generate-a-new-api-token", 
            "text": "In your account settings page, the first section contains your personal information, and has options\nto Change your password and Generate/Revoke your API Token.  If you don't already have an API Token generated, click the  Generate  link:", 
            "title": "Step 3. Generate a new API Token"
        }, 
        {
            "location": "/apiToken/index.html#step-4-copy-the-api-token", 
            "text": "You should now have an API Token in the text field labelled  API Token .  Copy this out and use it\nfor the  mPulseAPI.generateRepositoryToken  call.", 
            "title": "Step 4. Copy the API Token"
        }, 
        {
            "location": "/RepositoryAPI/index.html", 
            "text": "Repository API\n\n\n\n\ngetRepositoryToken\n\n\ngetRepositoryDomain\n\n\ngetRepositoryTenant\n\n\ngetCustomMetricMap\n\n\ngetCustomTimerMap\n\n\ngetNodeContent\n\n\n\n\nExported Functions\n\n\nfunction \ngetRepositoryToken\n\n\nRepositoryAPI.jl#56-100\n\n\nLogs in to the mPulse repository and fetches an Authorization token that can be used for other calls\n\n\nThe token will be cached in memory for 5 hours, so subsequent calls using the same tenant will return\nquickly without calling out to the API.  This can be a problem if the account has signed in from a different\nlocation or is logged out of mPulse.  You can clear the cache for this token using \nmPulseAPI.clearTokenCache\n\n\nArguments\n\n\n\n\ntenant::AbstractString\n\n\nThe name of the tenant to log in to. The token will be bound to this tenant.\n\n\napiToken::AbstractString\n\n\nThe apiToken issued by mPulse that allows authenticating with the API. If you've\n previously authenticated with this tenant, the \napiToken\n will be cached and does\n not need to be passed in again\n\n\n\n\nReturns\n\n\n{ASCIIString}\n The mPulse Repository Auth token which may be used in the \nX-Auth-Token\n header for subsequent API calls\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif the tenant or apiToken are empty\n\n\nmPulseAPIAuthException\n\n\nif authentication failed for some reason\n\n\n\n\n\n\nfunction \ngetRepositoryDomain\n\n\nRepositoryAPI.jl#189-237\n\n\nFetches a Domain object from the mPulse repository\n\n\nTo fetch a single domain, at least one of \ndomainID\n, \nappID\n or \nappName\n must be passed in to identify the domain.\nIf none of these are passed in, then all domains that are readable by the specified \ntoken\n will be returned as an array.\n\n\nThe domain will be cached in memory for 1 hour, so subsequent calls using a matching \ndomainID\n, \nappID\n or \nappName\n return\nquickly without calling out to the API.  This can be a problem if the domain changes in the repository.\nYou can clear the cache for this domain using \nmPulseAPI.clearDomainCache\n and passing in one of \ndomainID\n, \nappID\n or \nappName\n.\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \ngetRepositoryToken\n\n\n\n\nOptional Arguments\n\n\n\n\ndomainID::Int64\n\n\nThe ID of the domain to fetch.  This is the fastest method, but it can be hard to figure out a domain's ID\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.\n\n\nappName::AbstractString\n\n\nThe App name in mPulse. This is available from the mPulse domain configuration dialog.\n\n\n\n\nReturns\n\n\n{Dict|Array{Dict}}\n If one of \ndomainID\n, \nappID\n or \nappName\n are passed in, then a single \ndomain\n object is returned as a \nDict\n.\n\n\nIf none of these are passed in, then an array of all domains is returned, each is a \nDict\n.\n\n\nThe \ndomain\n \nDict\n has the following fields:\n\n\n\n\nname\n\n\nThe app's name\n\n\nid::Int64\n\n\nThe app's ID\n\n\nbody::XMLElement\n\n\nAn XML object representing the app's XML definition\n\n\ntenantID::Int64\n\n\nThe ID of the tenant that this app is in\n\n\ndescription::AbstractString\n\n\nThe description of this app entered into mPulse\n\n\ncreated::DateTime\n\n\nThe timestamp when this object was created\n\n\nlastModified::DateTime\n\n\nThe timestamp when this object was created\n\n\nattributes::Dict\n\n\nA \nDict\n of attributes for this app, including its \nAppID\n\n\ncustom_metrics::Dict\n\n\nA      \n{Dict}\n of Custom Metric names mapped to RedShift fieldnames with the following structure:\n  Dict(\n      \nmetric name\n =\n Dict(\n          \"index\"        =\n \nindex\n,                      # Numeric index\n          \"fieldname\"    =\n \"custom_metrics_\nindex\n\",     # Field name in dswb tables\n          \"lastModified\" =\n \nlastModifiedDate\n,\n          \"description\"  =\n \"\ndescription\n\",\n          \"dataType\"     =\n Dict(\n              \"decimalPlaces\"  =\n \"2\",\n              \"type\"           =\n \"\nmetric type\n\",\n              \"currencyCode\"   =\n \"\nISO 4217 Currency Code if type==Currency\n\"\n          ),\n          \"colors\"       =\n [\narray of color HEX codes\n]\n      ),\n      ...\n  )\n\n\n\n\n\ncustom_timers::Dict\n\n\nA      \n{Dict}\n of Custom Timer names mapped to RedShift fieldnames with the following structure:\n  Dict(\n      \ntimer name\n =\n Dict(\n          \"index\"         =\n \nindex\n,                      # Numeric index\n          \"fieldname\"     =\n \"timers_custom\nindex\n\",       # Field name in dswb tables\n          \"mpulseapiname\" =\n \"CustomTimer\nindex\n\",\n          \"lastModified\"  =\n \nlastModifiedDate\n,\n          \"description\"   =\n \"\ndescription\n\",\n          \"colors\"        =\n Array(\n              Dict(\n                  \"timingType\"  =\n \"\nseconds | milliseconds\n\",\n                  \"timingStart\" =\n \"\nstart timer value for this colour range\n\",\n                  \"timingEnd\"   =\n \"\nend timer value for this colour range\n\",\n                  \"colorStart\"  =\n \"\nstart of this color range\n\",\n                  \"endStart\"    =\n \"\nend of this color range\n\"\n              ),\n              ...\n          )\n      ),\n      ...\n  )\n\n\n\n\n\nsession_timeout::Int64\n\n\nThe session timeout value in minutes\n\n\nresource_timing::Bool\n\n\nFlag indicating whether resource timing collection is enabled or not\n\n\nvertical_market::AbstractString\n\n\nThe vertical market that this domain belongs to\n\n\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif token is empty or domainID, appID and appName are all empty\n\n\nmPulseAPIException\n\n\nif API access failed for some reason\n\n\nException\n\n\nif something unexpected happened while parsing the repository object\n\n\n\n\n\n\nfunction \ngetRepositoryTenant\n\n\nRepositoryAPI.jl#307-329\n\n\nFetches a Tenant object from the mPulse repository\n\n\nAt least one of \ntenantID\n or \nname\n must be passed in to identify the tenant.\n\n\nThe tenant will be cached in memory for 1 hour, so subsequent calls using a matching \ntenantID\n, or \nname\n return\nquickly without calling out to the API.  This can be a problem if the tenant changes in the repository.\nYou can clear the cache for this tenant using \nmPulseAPI.clearTenantCache\n and passing in one of \ntenantID\n or \nname\n.\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \ngetRepositoryToken\n\n\n\n\nOptional Arguments\n\n\n\n\ntenantID::Int64\n\n\nThe ID of the tenant to fetch.  This is the fastest method, but it can be hard to figure out a tenant's ID\n\n\nname::AbstractString\n\n\nThe Tenant name in mPulse.  This is available from the mPulse tenant list.\n\n\n\n\nReturns\n\n\n{Dict}\n The \ntenant\n object with the following fields:\n\n\n\n\nname::AbstractString\n\n\nThe tenant's name\n\n\nid::Int64\n\n\nThe tenant's ID\n\n\nbody::XMLElement\n\n\nAn XML object representing the tenant's XML definition or an empty node if you do not have permission to see the full tenant\n\n\nparentID::Int64\n\n\nThe ID of the parent folder that this tenant is in\n\n\nparentType::AbstractString\n\n\nThe type of parent object (typically \ntenantFolder\n)\n\n\npath::AbstractString\n\n\nThe folder path that this tenant is in\n\n\ndescription::AbstractString\n\n\nThe description of this tenant entered into mPulse\n\n\ncreated::DateTime\n\n\nThe timestamp when this object was created\n\n\nlastModified::DateTime\n\n\nThe timestamp when this object was created\n\n\nattributes::Dict\n\n\nA \nDict\n of attributes for this tenant\n\n\ndswbUrls::Array{AbstractString}\n\n\nAn array of DSWB URLs that are valid auth redirect targets for this tenant\n\n\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif token is empty or tenantID and name are both empty\n\n\nmPulseAPIException\n\n\nif API access failed for some reason\n\n\n\n\n\n\nNamespaced Functions\n\n\n\n\nNote\n\n\nThe following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the \nmPulseAPI.\n namespace.\n\n\n\n\nfunction \ngetCustomMetricMap\n\n\nRepositoryAPI.jl#451-486\n\n\nGets a mapping of custom metric names to RedShift field names from domain XML.  This list also includes valid dates.\n\n\nArguments\n\n\n\n\nbody::{AbstractString|XMLElement|Dict}\n\n\n\n\nThis is an object containing the domain XML returned by \nmPulseAPI.getRepositoryDomain\n.  It may be:\n\n\n\n\nAn \nAbstractString\n containing the domain XML.  This will be parsed.\n\n\nA \nLightXML.XMLElement\n pointing to the root node of the domain XML.\n\n\nA \nDict\n with a \nbody\n element. This is the domain object returned by \nmPulseAPI.getRepositoryDomain\n.\n\n\n\n\n\n\n\n\nReturns\n\n\n{Dict}\n of Custom Metric names mapped to RedShift fieldnames with the following structure:\n\n\n Dict(\n     \nmetric name\n =\n Dict(\n         \"index\"        =\n \nindex\n,                      # Numeric index\n         \"fieldname\"    =\n \"custom_metrics_\nindex\n\",     # Field name in dswb tables\n         \"lastModified\" =\n \nlastModifiedDate\n,\n         \"description\"  =\n \"\ndescription\n\",\n         \"dataType\"     =\n Dict(\n             \"decimalPlaces\"  =\n \"2\",\n             \"type\"           =\n \"\nmetric type\n\",\n             \"currencyCode\"   =\n \"\nISO 4217 Currency Code if type==Currency\n\"\n         ),\n         \"colors\"       =\n [\narray of color HEX codes\n]\n     ),\n     ...\n )\n\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif the data type of \nbody\n is unknown.\n\n\nLightXML.XMLParseError\n\n\nif \nbody\n is an \nAbstractString\n but contains invalid XML\n\n\n\n\n\n\nfunction \ngetCustomTimerMap\n\n\nRepositoryAPI.jl#503-539\n\n\nGets a mapping of custom timer names to RedShift field names from domain XML.  This list also includes valid dates.\n\n\nArguments\n\n\n\n\nbody::{AbstractString|XMLElement|Dict}\n\n\n\n\nThis is an object containing the domain XML returned by \nmPulseAPI.getRepositoryDomain\n.  It may be:\n\n\n\n\nAn \nAbstractString\n containing the domain XML.  This will be parsed.\n\n\nA \nLightXML.XMLElement\n pointing to the root node of the domain XML.\n\n\nA \nDict\n with a \nbody\n element. This is the domain object returned by \nmPulseAPI.getRepositoryDomain\n.\n\n\n\n\n\n\n\n\nReturns\n\n\n{Dict}\n of Custom Timer names mapped to RedShift fieldnames with the following structure:\n\n\n Dict(\n     \ntimer name\n =\n Dict(\n         \"index\"         =\n \nindex\n,                      # Numeric index\n         \"fieldname\"     =\n \"timers_custom\nindex\n\",       # Field name in dswb tables\n         \"mpulseapiname\" =\n \"CustomTimer\nindex\n\",\n         \"lastModified\"  =\n \nlastModifiedDate\n,\n         \"description\"   =\n \"\ndescription\n\",\n         \"colors\"        =\n Array(\n             Dict(\n                 \"timingType\"  =\n \"\nseconds | milliseconds\n\",\n                 \"timingStart\" =\n \"\nstart timer value for this colour range\n\",\n                 \"timingEnd\"   =\n \"\nend timer value for this colour range\n\",\n                 \"colorStart\"  =\n \"\nstart of this color range\n\",\n                 \"endStart\"    =\n \"\nend of this color range\n\"\n             ),\n             ...\n         )\n     ),\n     ...\n )\n\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif the data type of \nbody\n is unknown.\n\n\nLightXML.XMLParseError\n\n\nif \nbody\n is an \nAbstractString\n but contains invalid XML\n\n\n\n\n\n\nfunction \ngetNodeContent\n\n\nRepositoryAPI.jl#563-587\n\n\nGets the content of a node\n\n\nArguments\n\n\n\n\nbody::{AbstractString|XMLElement|Dict}\n\n\n\n\nThis is an object containing the domain XML returned by \nmPulseAPI.getRepositoryDomain\n.  It may be:\n\n\n\n\nAn \nAbstractString\n containing the domain XML.  This will be parsed.\n\n\nA \nLightXML.XMLElement\n pointing to the root node of the domain XML.\n\n\nA \nDict\n with a \nbody\n element. This is the domain object returned by \nmPulseAPI.getRepositoryDomain\n.\n\n\n\n\n\n\nnodeName::AbstractString\n\n\nThe node whose contents shoudl be returned\n\n\ndefault::Any\n\n\nA default value to return if the required node was not found\n\n\n\n\nReturns\n\n\n{AbstractString|Number|Boolean}\n The content of the requested node cast to the same type as \ndefault\n or the value of \ndefault\n if the node was not found\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nif the data type of \nbody\n is unknown.\n\n\nLightXML.XMLParseError\n\n\nif \nbody\n is an \nAbstractString\n but contains invalid XML", 
            "title": "Repository API"
        }, 
        {
            "location": "/RepositoryAPI/index.html#repository-api", 
            "text": "getRepositoryToken  getRepositoryDomain  getRepositoryTenant  getCustomMetricMap  getCustomTimerMap  getNodeContent", 
            "title": "Repository API"
        }, 
        {
            "location": "/RepositoryAPI/index.html#exported-functions", 
            "text": "", 
            "title": "Exported Functions"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getrepositorytoken", 
            "text": "RepositoryAPI.jl#56-100  Logs in to the mPulse repository and fetches an Authorization token that can be used for other calls  The token will be cached in memory for 5 hours, so subsequent calls using the same tenant will return\nquickly without calling out to the API.  This can be a problem if the account has signed in from a different\nlocation or is logged out of mPulse.  You can clear the cache for this token using  mPulseAPI.clearTokenCache", 
            "title": "function getRepositoryToken"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments", 
            "text": "tenant::AbstractString  The name of the tenant to log in to. The token will be bound to this tenant.  apiToken::AbstractString  The apiToken issued by mPulse that allows authenticating with the API. If you've\n previously authenticated with this tenant, the  apiToken  will be cached and does\n not need to be passed in again", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns", 
            "text": "{ASCIIString}  The mPulse Repository Auth token which may be used in the  X-Auth-Token  header for subsequent API calls", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws", 
            "text": "ArgumentError  if the tenant or apiToken are empty  mPulseAPIAuthException  if authentication failed for some reason", 
            "title": "Throws"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getrepositorydomain", 
            "text": "RepositoryAPI.jl#189-237  Fetches a Domain object from the mPulse repository  To fetch a single domain, at least one of  domainID ,  appID  or  appName  must be passed in to identify the domain.\nIf none of these are passed in, then all domains that are readable by the specified  token  will be returned as an array.  The domain will be cached in memory for 1 hour, so subsequent calls using a matching  domainID ,  appID  or  appName  return\nquickly without calling out to the API.  This can be a problem if the domain changes in the repository.\nYou can clear the cache for this domain using  mPulseAPI.clearDomainCache  and passing in one of  domainID ,  appID  or  appName .", 
            "title": "function getRepositoryDomain"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments_1", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  getRepositoryToken", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#optional-arguments", 
            "text": "domainID::Int64  The ID of the domain to fetch.  This is the fastest method, but it can be hard to figure out a domain's ID  appID::AbstractString  The App ID (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.  appName::AbstractString  The App name in mPulse. This is available from the mPulse domain configuration dialog.", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns_1", 
            "text": "{Dict|Array{Dict}}  If one of  domainID ,  appID  or  appName  are passed in, then a single  domain  object is returned as a  Dict .  If none of these are passed in, then an array of all domains is returned, each is a  Dict .  The  domain   Dict  has the following fields:   name  The app's name  id::Int64  The app's ID  body::XMLElement  An XML object representing the app's XML definition  tenantID::Int64  The ID of the tenant that this app is in  description::AbstractString  The description of this app entered into mPulse  created::DateTime  The timestamp when this object was created  lastModified::DateTime  The timestamp when this object was created  attributes::Dict  A  Dict  of attributes for this app, including its  AppID  custom_metrics::Dict  A       {Dict}  of Custom Metric names mapped to RedShift fieldnames with the following structure:   Dict(\n       metric name  =  Dict(\n          \"index\"        =   index ,                      # Numeric index\n          \"fieldname\"    =  \"custom_metrics_ index \",     # Field name in dswb tables\n          \"lastModified\" =   lastModifiedDate ,\n          \"description\"  =  \" description \",\n          \"dataType\"     =  Dict(\n              \"decimalPlaces\"  =  \"2\",\n              \"type\"           =  \" metric type \",\n              \"currencyCode\"   =  \" ISO 4217 Currency Code if type==Currency \"\n          ),\n          \"colors\"       =  [ array of color HEX codes ]\n      ),\n      ...\n  )   custom_timers::Dict  A       {Dict}  of Custom Timer names mapped to RedShift fieldnames with the following structure:   Dict(\n       timer name  =  Dict(\n          \"index\"         =   index ,                      # Numeric index\n          \"fieldname\"     =  \"timers_custom index \",       # Field name in dswb tables\n          \"mpulseapiname\" =  \"CustomTimer index \",\n          \"lastModified\"  =   lastModifiedDate ,\n          \"description\"   =  \" description \",\n          \"colors\"        =  Array(\n              Dict(\n                  \"timingType\"  =  \" seconds | milliseconds \",\n                  \"timingStart\" =  \" start timer value for this colour range \",\n                  \"timingEnd\"   =  \" end timer value for this colour range \",\n                  \"colorStart\"  =  \" start of this color range \",\n                  \"endStart\"    =  \" end of this color range \"\n              ),\n              ...\n          )\n      ),\n      ...\n  )   session_timeout::Int64  The session timeout value in minutes  resource_timing::Bool  Flag indicating whether resource timing collection is enabled or not  vertical_market::AbstractString  The vertical market that this domain belongs to", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws_1", 
            "text": "ArgumentError  if token is empty or domainID, appID and appName are all empty  mPulseAPIException  if API access failed for some reason  Exception  if something unexpected happened while parsing the repository object", 
            "title": "Throws"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getrepositorytenant", 
            "text": "RepositoryAPI.jl#307-329  Fetches a Tenant object from the mPulse repository  At least one of  tenantID  or  name  must be passed in to identify the tenant.  The tenant will be cached in memory for 1 hour, so subsequent calls using a matching  tenantID , or  name  return\nquickly without calling out to the API.  This can be a problem if the tenant changes in the repository.\nYou can clear the cache for this tenant using  mPulseAPI.clearTenantCache  and passing in one of  tenantID  or  name .", 
            "title": "function getRepositoryTenant"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments_2", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  getRepositoryToken", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#optional-arguments_1", 
            "text": "tenantID::Int64  The ID of the tenant to fetch.  This is the fastest method, but it can be hard to figure out a tenant's ID  name::AbstractString  The Tenant name in mPulse.  This is available from the mPulse tenant list.", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns_2", 
            "text": "{Dict}  The  tenant  object with the following fields:   name::AbstractString  The tenant's name  id::Int64  The tenant's ID  body::XMLElement  An XML object representing the tenant's XML definition or an empty node if you do not have permission to see the full tenant  parentID::Int64  The ID of the parent folder that this tenant is in  parentType::AbstractString  The type of parent object (typically  tenantFolder )  path::AbstractString  The folder path that this tenant is in  description::AbstractString  The description of this tenant entered into mPulse  created::DateTime  The timestamp when this object was created  lastModified::DateTime  The timestamp when this object was created  attributes::Dict  A  Dict  of attributes for this tenant  dswbUrls::Array{AbstractString}  An array of DSWB URLs that are valid auth redirect targets for this tenant", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws_2", 
            "text": "ArgumentError  if token is empty or tenantID and name are both empty  mPulseAPIException  if API access failed for some reason", 
            "title": "Throws"
        }, 
        {
            "location": "/RepositoryAPI/index.html#namespaced-functions", 
            "text": "Note  The following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the  mPulseAPI.  namespace.", 
            "title": "Namespaced Functions"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getcustommetricmap", 
            "text": "RepositoryAPI.jl#451-486  Gets a mapping of custom metric names to RedShift field names from domain XML.  This list also includes valid dates.", 
            "title": "function getCustomMetricMap"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments_3", 
            "text": "body::{AbstractString|XMLElement|Dict}   This is an object containing the domain XML returned by  mPulseAPI.getRepositoryDomain .  It may be:   An  AbstractString  containing the domain XML.  This will be parsed.  A  LightXML.XMLElement  pointing to the root node of the domain XML.  A  Dict  with a  body  element. This is the domain object returned by  mPulseAPI.getRepositoryDomain .", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns_3", 
            "text": "{Dict}  of Custom Metric names mapped to RedShift fieldnames with the following structure:   Dict(\n      metric name  =  Dict(\n         \"index\"        =   index ,                      # Numeric index\n         \"fieldname\"    =  \"custom_metrics_ index \",     # Field name in dswb tables\n         \"lastModified\" =   lastModifiedDate ,\n         \"description\"  =  \" description \",\n         \"dataType\"     =  Dict(\n             \"decimalPlaces\"  =  \"2\",\n             \"type\"           =  \" metric type \",\n             \"currencyCode\"   =  \" ISO 4217 Currency Code if type==Currency \"\n         ),\n         \"colors\"       =  [ array of color HEX codes ]\n     ),\n     ...\n )", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws_3", 
            "text": "ArgumentError  if the data type of  body  is unknown.  LightXML.XMLParseError  if  body  is an  AbstractString  but contains invalid XML", 
            "title": "Throws"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getcustomtimermap", 
            "text": "RepositoryAPI.jl#503-539  Gets a mapping of custom timer names to RedShift field names from domain XML.  This list also includes valid dates.", 
            "title": "function getCustomTimerMap"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments_4", 
            "text": "body::{AbstractString|XMLElement|Dict}   This is an object containing the domain XML returned by  mPulseAPI.getRepositoryDomain .  It may be:   An  AbstractString  containing the domain XML.  This will be parsed.  A  LightXML.XMLElement  pointing to the root node of the domain XML.  A  Dict  with a  body  element. This is the domain object returned by  mPulseAPI.getRepositoryDomain .", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns_4", 
            "text": "{Dict}  of Custom Timer names mapped to RedShift fieldnames with the following structure:   Dict(\n      timer name  =  Dict(\n         \"index\"         =   index ,                      # Numeric index\n         \"fieldname\"     =  \"timers_custom index \",       # Field name in dswb tables\n         \"mpulseapiname\" =  \"CustomTimer index \",\n         \"lastModified\"  =   lastModifiedDate ,\n         \"description\"   =  \" description \",\n         \"colors\"        =  Array(\n             Dict(\n                 \"timingType\"  =  \" seconds | milliseconds \",\n                 \"timingStart\" =  \" start timer value for this colour range \",\n                 \"timingEnd\"   =  \" end timer value for this colour range \",\n                 \"colorStart\"  =  \" start of this color range \",\n                 \"endStart\"    =  \" end of this color range \"\n             ),\n             ...\n         )\n     ),\n     ...\n )", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws_4", 
            "text": "ArgumentError  if the data type of  body  is unknown.  LightXML.XMLParseError  if  body  is an  AbstractString  but contains invalid XML", 
            "title": "Throws"
        }, 
        {
            "location": "/RepositoryAPI/index.html#function-getnodecontent", 
            "text": "RepositoryAPI.jl#563-587  Gets the content of a node", 
            "title": "function getNodeContent"
        }, 
        {
            "location": "/RepositoryAPI/index.html#arguments_5", 
            "text": "body::{AbstractString|XMLElement|Dict}   This is an object containing the domain XML returned by  mPulseAPI.getRepositoryDomain .  It may be:   An  AbstractString  containing the domain XML.  This will be parsed.  A  LightXML.XMLElement  pointing to the root node of the domain XML.  A  Dict  with a  body  element. This is the domain object returned by  mPulseAPI.getRepositoryDomain .    nodeName::AbstractString  The node whose contents shoudl be returned  default::Any  A default value to return if the required node was not found", 
            "title": "Arguments"
        }, 
        {
            "location": "/RepositoryAPI/index.html#returns_5", 
            "text": "{AbstractString|Number|Boolean}  The content of the requested node cast to the same type as  default  or the value of  default  if the node was not found", 
            "title": "Returns"
        }, 
        {
            "location": "/RepositoryAPI/index.html#throws_5", 
            "text": "ArgumentError  if the data type of  body  is unknown.  LightXML.XMLParseError  if  body  is an  AbstractString  but contains invalid XML", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html", 
            "text": "Query API\n\n\n\n\ngetAPIResults\n\n\ngetSummaryTimers\n\n\ngetPageGroupTimers\n\n\ngetBrowserTimers\n\n\ngetABTestTimers\n\n\ngetGeoTimers\n\n\ngetMetricsByDimension\n\n\ngetTimersMetrics\n\n\ngetHistogram\n\n\ngetSessionsOverPageLoadTime\n\n\ngetMetricOverPageLoadTime\n\n\ngetTimerByMinute\n\n\nmergeMetrics\n\n\n\n\nNamespaced Functions\n\n\n\n\nNote\n\n\nThe following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the \nmPulseAPI.\n namespace.\n\n\n\n\nfunction \ngetAPIResults\n\n\nQueryAPI.jl#59-147\n\n\nGet API results from the mPulse \nQuery API\n\n\nThis method is a generic catch-all that queries the mPulse API and returns results as a Julia data structure matching the JSON structure of the specified API call\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\nquery_type::AbstractString\n\n\n\n\nThe specific API query to make.  Must be one of the following:\n\n\n\n\nsummary\n\n\nhistogram\n\n\nsessions-per-page-load-time\n\n\nmetric-per-page-load-time\n\n\nby-minute\n\n\ngeography\n\n\npage-groups\n\n\nbrowsers\n\n\nbandwidth\n\n\nab-tests\n\n\ntimers-metrics\n\n\nmetrics-by-dimension\n\n\n\n\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nArgumentError\n\n\nIf the \nquery_type\n is not recognized\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\n\n\nReturns\n\n\n{Any}\n A Julia representation of the JSON returned by the API call. Convenience wrappers in this library may return more appropriate data structures.\n\n\n\n\nfunction \ngetSummaryTimers\n\n\nQueryAPI.jl#196-198\n\n\nCalls the \nsummary\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\n\n\nReturns\n\n\n{Dict}\n A Julia \nDict\n with the following string keys:\n\n\n\n\nn::Int\n\n\nThe number of beacons with data about the requested timer\n\n\nmedian::Int\n\n\nThe median of the requested timer in milliseconds\n\n\np95::Int\n\n\nThe 95th percentile value of the requested timer in milliseconds\n\n\np98::Int\n\n\nThe 98th percentile value of the requested timer in milliseconds\n\n\nmoe::Float\n\n\nThe 95% confidence interval margin of error on the arithmetic mean of the requested timer in milliseconds\n\n\n\n\nExamples\n\n\njulia\n summary = mPulseAPI.getSummaryTimers(token, appID)\n\nDict{Any,Any} with 5 entries:\n  \nn\n      =\n 356317\n  \nmedian\n =\n 3094\n  \np95\n    =\n 19700\n  \np98\n    =\n 40678\n  \nmoe\n    =\n 13.93\n\n\n\n\n\n\nfunction \ngetPageGroupTimers\n\n\nQueryAPI.jl#222-236\n\n\nCalls the \npage-groups\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\nfriendly_names::Bool=false\n\n\n\n\nSpecify whether column names in the \nDataFrame\n should be human friendly or developer friendly (default)\n\n\nHuman friendly column names are:\n\n\nPage Group\n, \nMedian Time (ms)\n, \nMoE (ms)\n, \nMeasurements\n, \n% of total\n\n\nDeveloper friendly column names are:\n\n\n:page_group\n, \n:t_done_median\n, \n:t_done_moe\n, \n:t_done_count\n, \n:t_done_total_pc\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had  data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A Julia \nDataFrame\n with the following columns:\n\n\npage_group\n, \nt_done_median\n, \nt_done_moe\n, \nt_done_count\n, and \nt_done_total_pc\n\n\njulia\n pgroups = mPulseAPI.getPageGroupTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | page_group                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | www                         | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | blog                        | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Search                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | SKU                         | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | PLU                         | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | (No Page Group)             | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Checkout                    | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n\nfunction \ngetBrowserTimers\n\n\nQueryAPI.jl#260-274\n\n\nCalls the \nbrowsers\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\nfriendly_names::Bool=false\n\n\n\n\nSpecify whether column names in the \nDataFrame\n should be human friendly or developer friendly (default)\n\n\nHuman friendly column names are:\n\n\nUser Agent\n, \nMedian Time (ms)\n, \nMoE (ms)\n, \nMeasurements\n, \n% of total\n\n\nDeveloper friendly column names are:\n\n\n:user_agent\n, \n:t_done_median\n, \n:t_done_moe\n, \n:t_done_count\n, \n:t_done_total_pc\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had  data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A Julia \nDataFrame\n with the following columns:\n\n\nuser_agent\n, \nt_done_median\n, \nt_done_moe\n, \nt_done_count\n, and \nt_done_total_pc\n\n\njulia\n pgroups = mPulseAPI.getBrowserTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | user_agent                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | Chrome/50                   | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Safari/9                    | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Mobile Safari/9             | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | Firefox/46                  | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Chrome/49                   | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | IE/11                       | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Edge/13                     | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n\nfunction \ngetABTestTimers\n\n\nQueryAPI.jl#298-312\n\n\nCalls the \nab-tests\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\nfriendly_names::Bool=false\n\n\n\n\nSpecify whether column names in the \nDataFrame\n should be human friendly or developer friendly (default)\n\n\nHuman friendly column names are:\n\n\nTest Name\n, \nMedian Time (ms)\n, \nMoE (ms)\n, \nMeasurements\n, \n% of total\n\n\nDeveloper friendly column names are:\n\n\n:test_name\n, \n:t_done_median\n, \n:t_done_moe\n, \n:t_done_count\n, \n:t_done_total_pc\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had  data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A Julia \nDataFrame\n with the following columns:\n\n\ntest_name\n, \nt_done_median\n, \nt_done_moe\n, \nt_done_count\n, and \nt_done_total_pc\n\n\njulia\n pgroups = mPulseAPI.getABTestTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | test_name                   | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | (No Value)                  | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Test-A                      | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Test-B                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | BlueHead                    | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Campaign-XXX                | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | Old-Site                    | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Slow-SRP                    | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n\nfunction \ngetGeoTimers\n\n\nQueryAPI.jl#336-354\n\n\nCalls the \ngeography\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\nfriendly_names::Bool=false\n\n\n\n\nSpecify whether column names in the \nDataFrame\n should be human friendly or developer friendly (default)\n\n\nHuman friendly column names are:\n\n\nCountry\n, \nMedian Time (ms)\n, \nMoE (ms)\n, \nMeasurements\n, \n% of total\n\n\nDeveloper friendly column names are:\n\n\n:country\n, \n:t_done_median\n, \n:t_done_moe\n, \n:t_done_count\n, \n:t_done_total_pc\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had  data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A Julia \nDataFrame\n with the following columns:\n\n\ncountry\n, \nt_done_median\n, \nt_done_moe\n, \nt_done_count\n, and \nt_done_total_pc\n\n\njulia\n pgroups = mPulseAPI.getCountryTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | country                     | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | US                          | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | CA                          | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | MX                          | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | PH                          | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | AU                          | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | KR                          | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | PE                          | 2875             | 169.091    | 2386         | 2.21402         |\n\n\n\n\n\n\n\nfunction \ngetMetricsByDimension\n\n\nQueryAPI.jl#401-433\n\n\nCalls the \nmetrics-by-dimension\n endpoint of the mPulse REST API with the passed in dimension name and filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\ndimension::AbstractString\n\n\n\n\nThe dimension to split metrics by.  The response contains one row for each value of this dimension.  The following dimensions are supported:\n\n\n\n\npage_group\n\n\nbrowser\n\n\ncountry\n\n\nbw_block\n\n\nab_test\n\n\n\n\nSee \nhttp://docs.soasta.com/query-api/#metrics-by-dimension-parameters\n for\n an up-to-date list.\n\n\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had  data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A Julia \nDataFrame\n with the following columns: \n:\ndimension\n, \n:\nCustomMetric Name\n...\n\n\njulia\n mPulseAPI.getMetricsByDimension(token, appID, \nbrowser\n)\n243x4 DataFrames.DataFrame\n| Row | browser                          | Conversion | OrderTotal | ServerDown  |\n|-----|----------------------------------|------------|------------|-------------|\n| 1   | \nMobile Safari/9\n                | 1.381      | 1.62854e7  | 0.000994956 |\n| 2   | \nChrome/50\n                      | 1.98411    | 3.13401e7  | 0.0050615   |\n| 3   | \nSafari/9\n                       | 3.08288    | 2.10698e7  | 0.00561545  |\n| 4   | \nFirefox/46\n                     | 1.90974    | 8569362    | 0.00462406  |\n| 5   | \nMobile Safari/8\n                | 2.38545    | 2295848    | 0.0         |\n| 6   | \nChrome/49\n                      | 2.22828    | 4394331    | 0.0         |\n\n\n\n\n\n\nfunction \ngetTimersMetrics\n\n\nQueryAPI.jl#479-519\n\n\nCalls the \ntimers-metrics\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nException\n\n\nIf there was an unexpected type error parsing response values\n\n\n\n\nReturns\n\n\n{DataFrame}\n A \nDataFrame\n with one column for each timer and metric.  Known columns include:\n\n\n\n\n:Beacons\n and \n:PageLoad\n will always be present.\n\n\n:Sessions\n and \n:BounceRate\n will be present if session tracking is enabled (on by default)\n\n\n:DNS\n, \n:TCP\n, \n:SSL\n, \n:FirstByte\n, \n:DomLoad\n, \n:DomReady\n and \n:FirstLastByte\n will be present if NavigationTiming is available (almost always available)\n\n\nCustom Timers \n Custom Metrics are included if defined and if they have data for the selected time period\n\n\n\n\nThe last row in the DataFrame is the latest value of the timer or metric.  All preceding rows are historic values over the time period broken down by a predefined time unit.\nFor example, for Last24Hours, there will be 1440 entries representing each minute in the 24 hour period.\n\n\njulia\n mPulseAPI.getTimersMetrics(token, appID)\n1441x16 DataFrames.DataFrame\n| Row  | PageLoad | DNS | DomLoad | DomReady | FirstByte | SSL | FirstLastByte | TCP | DOM Interactive | Sessions | BounceRate | Conversion | OrderTotal | Beacons |\n|------|----------|-----|---------|----------|-----------|-----|---------------|-----|-----------------|----------|------------|------------|------------|---------|\n| 1    | 3442     \u2502 46  \u2502 805     \u2502 3345     \u2502 732       \u2502 59  \u2502 2468          \u2502 36  \u2502 1696            \u2502 353      \u2502 34         \u2502 0.566572   \u2502 58652.0    \u2502 1808    \u2502\n| 2    | 3308     | 45  | 758     | 3173     | 705       | 56  | 2351          | 32  | 1620            | 331      | 30         | 2.1148     | 266219.0   | 1767    |\n| 3    | 3412     | 38  | 794     | 3287     | 726       | 69  | 2360          | 31  | 1707            | 346      | 29         | 1.44509    | 209205.0   | 1806    |\n| 4    | 3368     | 40  | 775     | 3250     | 701       | 51  | 2500          | 34  | 1670            | 354      | 32         | 2.25989    | 47354.0    | 1850    |\n| 5    | 3346     | 37  | 754     | 3222     | 691       | 61  | 2516          | 31  | 1624            | 326      | 30         | 2.76074    | 132915.0   | 1742    |\n| 6    | 3162     | 36  | 729     | 3040     | 665       | 86  | 2283          | 30  | 1611            | 382      | 28         | 1.57068    | 117284.0   | 1803    |\n| 7    | 3453     | 39  | 862     | 3320     | 787       | 64  | 2471          | 32  | 1772            | 356      | 33         | 2.52809    | 108045.0   | 1727    |\n| 8    | 3593     | 46  | 1028    | 3491     | 889       | 92  | 2495          | 33  | 1952            | 314      | 33         | 1.27389    | 150020.0   | 1715    |\n\n\n\n\n\n\nfunction \ngetHistogram\n\n\nQueryAPI.jl#585-599\n\n\nCalls the \nhistogram\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had a missing \nseries\n element or data in an unexpected data type\n\n\n\n\nReturns\n\n\n{Dict}\n A Julia \nDict\n with the following string keys:\n\n\n\n\nmedian::Int\n\n\nThe median value for values in the histogram in milliseconds\n\n\np95::Int\n\n\nThe 95th percentile value for values in the histogram in milliseconds\n\n\np98::Int\n\n\nThe 98th percentile value for values in the histogram in milliseconds\n\n\nbuckets::DataFrame\n\n\nBuckets for the histogram.  These buckets are variable width. See below for a description.\n\n\n\n\njulia\n histo = mPulseAPI.getHistogram(token, appID)\nDict{AbstractString,Any} with 4 entries:\n  \nmedian\n  =\n 3439\n  \np95\n     =\n 12843\n  \np98\n     =\n 22816\n  \nbuckets\n =\n 117x3 DataFrames.DataFrame\u2026\n\n\n\n\nThe buckets \nDataFrame\n has the following columns: \n:bucket_start\n, \n:bucket_end\n, \n:element_count\n\n\njulia\n histo[\nbuckets\n]\n117x3 DataFrames.DataFrame\n| Row | bucket_start | bucket_end | element_count |\n|-----|--------------|------------|---------------|\n| 1   | 1            | 2          | 1             |\n| 2   | 3            | 4          | 3             |\n| 3   | 4            | 5          | 8             |\n| 4   | 5            | 6          | 7             |\n| 5   | 6            | 7          | 9             |\n| 6   | 7            | 8          | 8             |\n| 7   | 8            | 9          | 14            |\n| 8   | 9            | 10         | 13            |\n| 9   | 10           | 11         | 17            |\n| 10  | 11           | 12         | 15            |\n| 11  | 12           | 13         | 19            |\n| 12  | 13           | 14         | 18            |\n| 13  | 14           | 15         | 19            |\n\n\n\n\n\n\nfunction \ngetSessionsOverPageLoadTime\n\n\nQueryAPI.jl#619-621\n\n\nCalls the \nsessions-per-page-load-time\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a request parameter\n\n\n\n\nReturns\n\n\n{DataFrame}\n A julia \nDataFrame\n mapping the Sessions to a load time bucket:\n\n\njulia\n mPulseAPI.getSessionsOverPageLoadTime(token, appID)\n60x2 DataFrames.DataFrame\n| Row | t_done | Sessions   |\n|-----|--------|------------|\n| 1   | 210    | 72         |\n| 2   | 300    | 36         |\n| 3   | 400    | 72         |\n| 4   | 500    | 30         |\n| 5   | 550    | 66         |\n| 6   | 600    | 464        |\n| 7   | 700    | 30         |\n| 8   | 800    | 749        |\n| 9   | 900    | 709        |\n| 10  | 1050   | 1246       |\n\n\n\n\n\n\nfunction \ngetMetricOverPageLoadTime\n\n\nQueryAPI.jl#646-670\n\n\nCalls the \nmetric-per-page-load-time\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\nmetric::AbstractString\n\n\nThe name of the metric that we want data for.  If not specified, defaults to \nBounceRate\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a metric\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had a missing \nseries\n element or data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A julia \nDataFrame\n mapping the Metric to a load time bucket:\n\n\njulia\n mPulseAPI.getMetricOverPageLoadTime(token, appID)\n60x2 DataFrames.DataFrame\n| Row | t_done | BounceRate |\n|-----|--------|------------|\n| 1   | 210    | NA         |\n| 2   | 300    | 100.0      |\n| 3   | 400    | NA         |\n| 4   | 500    | 68.57      |\n| 5   | 550    | 12.65      |\n| 6   | 600    | 71.08      |\n| 7   | 700    | 68.57      |\n| 8   | 800    | 14.51      |\n| 9   | 900    | 20.83      |\n| 10  | 1050   | 24.58      |\n\n\n\n\n\n\nfunction \ngetTimerByMinute\n\n\nQueryAPI.jl#725-759\n\n\nCalls the \nby-minute\n endpoint of the mPulse REST API with the passed in filters\n\n\nArguments\n\n\n\n\ntoken::AbstractString\n\n\nThe Repository authentication token fetched by calling \nmPulseAPI.getRepositoryToken\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n \nmPulseAPI.getRepositoryDomain\n to fetch a domain and then inspect \ndomain[\"attributes\"][\"appID\"]\n\n\n\n\nOptional Arguments\n\n\n\n\ntimer::AbstractString\n\n\n\n\nThe name of the timer whose data we want.  If not specified, defaults to \nPageLoad\n.  Other possible\n values are:\n\n\n\n\nPageLoad\n\n\nDNS\n\n\nTCP\n\n\nSSL\n\n\nFirstByte\n\n\nDomLoad\n\n\nDomReady\n\n\nFirstLastByte\n\n\nall custom timers\n\n\n\n\n\n\nfilters::Dict\n\n\n\n\nA dict of filters to pass to the mPulse Query API. For example \nDict(\"page-group\" =\n \"foo-bar\")\n\n will filter results to the \nfoo-bar\n \npage-group\n.  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.\n\n\nThe default filters are:\n\n\n Dict(\n     \"date-comparator\" =\n \"Last24Hours\",\n     \"format\" =\n \"json\",\n     \"series-format\" =\n \"json\"\n )\n\n\n\n\n\n\n\nThrows\n\n\n\n\nmPulseAPIAuthException\n\n\nIf the \ntoken\n is invalid or has expired.\n\n\nmPulseAPIException\n\n\nIf the API returned a non-200 status.  Inspect \nmPulseAPIException.response\n for details about\nthe problem\n\n\nmPulseAPIRequestException\n\n\nIf the API was unhappy with a timer\n\n\nmPulseAPIResultFormatException\n\n\nIf the API response had a missing \nseries\n element or data in an unexpected data type\n\n\n\n\nReturns\n\n\n{DataFrame}\n A julia \nDataFrame\n containing timeseries data for the median value of the timer and its margin of error.\nThe fields are: \n:timestamp\n in milliseconds since the UNIX epoch, \n:\nTimerName\n in milliseconds and \n:moe\n in milliseconds.\n\n\njulia\n data = mPulseAPI.getTimerByMinute(token, appID, timer=\nPageLoad\n)\n1440x3 DataFrames.DataFrame\n| Row  | timestamp     | PageLoad | moe  |\n|------|---------------|----------|------|\n| 1    | 1463452800000 | 3679     | 135  |\n| 2    | 1463452860000 | 3731     | 202  |\n| 3    | 1463452920000 | 3706     | 116  |\n| 4    | 1463452980000 | 3911     | 171  |\n| 5    | 1463453040000 | 3757     | 181  |\n| 6    | 1463453100000 | 3729     | 174  |\n| 7    | 1463453160000 | 3779     | 174  |\n| 8    | 1463453220000 | 3916     | 182  |\n\n\n\n\n\n\n\nfunction \nmergeMetrics\n\n\nQueryAPI.jl#824-832\n\n\nMerge multiple similar \nDataFrames\n into a single \nDataFrame\n\n\nUse this method to merge the results from multiple calls to \ngetMetricOverPageLoadTime()\n and \ngetSessionsOverPageLoadTime()\n.\nAll passed in \nDataFrame\ns MUST contain a \n:t_done\n column.\n\n\nArguments\n\n\n\n\ndf1::DataFrame\n\n\nThe first \nDataFrame\n in the collection.  This method requires at least one \nDataFrame\n to be passed in.\n\n\ndf2::DataFrame...\n\n\nOne or more \nDataFrame\n to be merged together with the first one\n\n\n\n\nOptional Arguments\n\n\n\n\nkeyField::Symbol=:t_done\n\n\nThe column name to join on.  Defaults to \n:t_done\n\n\njoinType::Symbol=:outer\n\n\nThe type of join to perform.  See the \nkind\n parameter in \n?join\n for a list of supported join types\n\n\n\n\nThrows\n\n\n\n\nKeyError\n\n\nif the \nkeyField\n column does not exist in all passed in \nDataFrame\ns\n\n\n\n\nReturns\n\n\n\n\nIf only one \nDataFrame\n is passed in, it is returned as-is.  This is not a copy of the first DataFrame.\n\n\nIf multiple \nDataFrame\ns are passed in, they are merged using an \nouter\n join on the \nkeyField\n column, and the resulting \nDataFrame\n is returned.\n  Since we perform an outer join, rows in any of the DataFrames that do not have a matching \nkeyField\n value found in other DataFrames will be filled with \nNA\n\n\n\n\njulia\n sessions   = mPulseAPI.getSessionsOverPageLoadTime(token, appID);\njulia\n bouncerate = mPulseAPI.getMetricOverPageLoadTime(token, appID);\njulia\n conversion = mPulseAPI.getMetricOverPageLoadTime(token, appID, metric=\nConversion\n);\n\njulia\n mPulseAPI.mergeMetrics(sessions, bouncerate, conversion)\n65x4 DataFrames.DataFrame\n| Row | t_done | Sessions | BounceRate | Conversion |\n|-----|--------|----------|------------|------------|\n| 1   | 6      | 1        | NA         | NA         |\n| 2   | 10     | 2        | 50.0       | NA         |\n| 3   | 12     | 2        | 100.0      | NA         |\n| 4   | 17     | 1        | 100.0      | NA         |\n| 5   | 30     | 1        | 100.0      | NA         |\n| 6   | 34     | 1        | NA         | NA         |\n| 7   | 40     | 1        | 100.0      | NA         |\n| 8   | 60     | 2        | 100.0      | NA         |\n| 9   | 70     | 1        | 100.0      | NA         |\n| 10  | 120    | 2        | 100.0      | NA         |\n| 11  | 140    | 1        | NA         | NA         |\n| 12  | 170    | 1        | NA         | NA         |\n| 13  | 190    | 1        | 100.0      | NA         |\n| 14  | 230    | 1        | NA         | NA         |\n...\n| 44  | 3750   | 8332     | 29.5915    | 2.25043    |\n| 45  | 3950   | 7957     | 31.7591    | 2.08962    |\n| 46  | 4200   | 7342     | 34.9953    | 2.02302    |\n| 47  | 4500   | 6783     | 37.0922    | 1.59947    |\n| 48  | 4800   | 6140     | 40.2336    | 1.67129    |\n| 49  | 5100   | 5530     | 42.2393    | 1.32839    |", 
            "title": "Query API"
        }, 
        {
            "location": "/QueryAPI/index.html#query-api", 
            "text": "getAPIResults  getSummaryTimers  getPageGroupTimers  getBrowserTimers  getABTestTimers  getGeoTimers  getMetricsByDimension  getTimersMetrics  getHistogram  getSessionsOverPageLoadTime  getMetricOverPageLoadTime  getTimerByMinute  mergeMetrics", 
            "title": "Query API"
        }, 
        {
            "location": "/QueryAPI/index.html#namespaced-functions", 
            "text": "Note  The following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the  mPulseAPI.  namespace.", 
            "title": "Namespaced Functions"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getapiresults", 
            "text": "QueryAPI.jl#59-147  Get API results from the mPulse  Query API  This method is a generic catch-all that queries the mPulse API and returns results as a Julia data structure matching the JSON structure of the specified API call", 
            "title": "function getAPIResults"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]  query_type::AbstractString   The specific API query to make.  Must be one of the following:   summary  histogram  sessions-per-page-load-time  metric-per-page-load-time  by-minute  geography  page-groups  browsers  bandwidth  ab-tests  timers-metrics  metrics-by-dimension", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws", 
            "text": "ArgumentError  If the  query_type  is not recognized  mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns", 
            "text": "{Any}  A Julia representation of the JSON returned by the API call. Convenience wrappers in this library may return more appropriate data structures.", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getsummarytimers", 
            "text": "QueryAPI.jl#196-198  Calls the  summary  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getSummaryTimers"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_1", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_1", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_1", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_1", 
            "text": "{Dict}  A Julia  Dict  with the following string keys:   n::Int  The number of beacons with data about the requested timer  median::Int  The median of the requested timer in milliseconds  p95::Int  The 95th percentile value of the requested timer in milliseconds  p98::Int  The 98th percentile value of the requested timer in milliseconds  moe::Float  The 95% confidence interval margin of error on the arithmetic mean of the requested timer in milliseconds", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#examples", 
            "text": "julia  summary = mPulseAPI.getSummaryTimers(token, appID)\n\nDict{Any,Any} with 5 entries:\n   n       =  356317\n   median  =  3094\n   p95     =  19700\n   p98     =  40678\n   moe     =  13.93", 
            "title": "Examples"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getpagegrouptimers", 
            "text": "QueryAPI.jl#222-236  Calls the  page-groups  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getPageGroupTimers"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_2", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_2", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )   friendly_names::Bool=false   Specify whether column names in the  DataFrame  should be human friendly or developer friendly (default)  Human friendly column names are:  Page Group ,  Median Time (ms) ,  MoE (ms) ,  Measurements ,  % of total  Developer friendly column names are:  :page_group ,  :t_done_median ,  :t_done_moe ,  :t_done_count ,  :t_done_total_pc", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_2", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had  data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_2", 
            "text": "{DataFrame}  A Julia  DataFrame  with the following columns:  page_group ,  t_done_median ,  t_done_moe ,  t_done_count , and  t_done_total_pc  julia  pgroups = mPulseAPI.getPageGroupTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | page_group                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | www                         | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | blog                        | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Search                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | SKU                         | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | PLU                         | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | (No Page Group)             | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Checkout                    | 2875             | 169.091    | 2386         | 2.21402         |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getbrowsertimers", 
            "text": "QueryAPI.jl#260-274  Calls the  browsers  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getBrowserTimers"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_3", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_3", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )   friendly_names::Bool=false   Specify whether column names in the  DataFrame  should be human friendly or developer friendly (default)  Human friendly column names are:  User Agent ,  Median Time (ms) ,  MoE (ms) ,  Measurements ,  % of total  Developer friendly column names are:  :user_agent ,  :t_done_median ,  :t_done_moe ,  :t_done_count ,  :t_done_total_pc", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_3", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had  data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_3", 
            "text": "{DataFrame}  A Julia  DataFrame  with the following columns:  user_agent ,  t_done_median ,  t_done_moe ,  t_done_count , and  t_done_total_pc  julia  pgroups = mPulseAPI.getBrowserTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | user_agent                  | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | Chrome/50                   | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Safari/9                    | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Mobile Safari/9             | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | Firefox/46                  | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Chrome/49                   | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | IE/11                       | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Edge/13                     | 2875             | 169.091    | 2386         | 2.21402         |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getabtesttimers", 
            "text": "QueryAPI.jl#298-312  Calls the  ab-tests  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getABTestTimers"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_4", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_4", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )   friendly_names::Bool=false   Specify whether column names in the  DataFrame  should be human friendly or developer friendly (default)  Human friendly column names are:  Test Name ,  Median Time (ms) ,  MoE (ms) ,  Measurements ,  % of total  Developer friendly column names are:  :test_name ,  :t_done_median ,  :t_done_moe ,  :t_done_count ,  :t_done_total_pc", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_4", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had  data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_4", 
            "text": "{DataFrame}  A Julia  DataFrame  with the following columns:  test_name ,  t_done_median ,  t_done_moe ,  t_done_count , and  t_done_total_pc  julia  pgroups = mPulseAPI.getABTestTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | test_name                   | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | (No Value)                  | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | Test-A                      | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | Test-B                      | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | BlueHead                    | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | Campaign-XXX                | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | Old-Site                    | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | Slow-SRP                    | 2875             | 169.091    | 2386         | 2.21402         |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getgeotimers", 
            "text": "QueryAPI.jl#336-354  Calls the  geography  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getGeoTimers"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_5", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_5", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )   friendly_names::Bool=false   Specify whether column names in the  DataFrame  should be human friendly or developer friendly (default)  Human friendly column names are:  Country ,  Median Time (ms) ,  MoE (ms) ,  Measurements ,  % of total  Developer friendly column names are:  :country ,  :t_done_median ,  :t_done_moe ,  :t_done_count ,  :t_done_total_pc", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_5", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had  data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_5", 
            "text": "{DataFrame}  A Julia  DataFrame  with the following columns:  country ,  t_done_median ,  t_done_moe ,  t_done_count , and  t_done_total_pc  julia  pgroups = mPulseAPI.getCountryTimers(token, appID)\n69x5 DataFrames.DataFrame\n| Row | country                     | t_done_median    | t_done_moe | t_done_count | t_done_total_pc |\n|-----|-----------------------------|------------------|------------|--------------|-----------------|\n| 1   | US                          | 3090             | 40.6601    | 49904        | 46.3069         |\n| 2   | CA                          | 2557             | 51.7651    | 17779        | 16.4975         |\n| 3   | MX                          | 4587             | 88.988     | 7248         | 6.72556         |\n| 4   | PH                          | 3463             | 120.895    | 6885         | 6.38872         |\n| 5   | AU                          | 3276             | 116.507    | 6688         | 6.20592         |\n| 6   | KR                          | 3292             | 165.514    | 2949         | 2.73643         |\n| 7   | PE                          | 2875             | 169.091    | 2386         | 2.21402         |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getmetricsbydimension", 
            "text": "QueryAPI.jl#401-433  Calls the  metrics-by-dimension  endpoint of the mPulse REST API with the passed in dimension name and filters", 
            "title": "function getMetricsByDimension"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_6", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]  dimension::AbstractString   The dimension to split metrics by.  The response contains one row for each value of this dimension.  The following dimensions are supported:   page_group  browser  country  bw_block  ab_test   See  http://docs.soasta.com/query-api/#metrics-by-dimension-parameters  for\n an up-to-date list.", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_6", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_6", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had  data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_6", 
            "text": "{DataFrame}  A Julia  DataFrame  with the following columns:  : dimension ,  : CustomMetric Name ...  julia  mPulseAPI.getMetricsByDimension(token, appID,  browser )\n243x4 DataFrames.DataFrame\n| Row | browser                          | Conversion | OrderTotal | ServerDown  |\n|-----|----------------------------------|------------|------------|-------------|\n| 1   |  Mobile Safari/9                 | 1.381      | 1.62854e7  | 0.000994956 |\n| 2   |  Chrome/50                       | 1.98411    | 3.13401e7  | 0.0050615   |\n| 3   |  Safari/9                        | 3.08288    | 2.10698e7  | 0.00561545  |\n| 4   |  Firefox/46                      | 1.90974    | 8569362    | 0.00462406  |\n| 5   |  Mobile Safari/8                 | 2.38545    | 2295848    | 0.0         |\n| 6   |  Chrome/49                       | 2.22828    | 4394331    | 0.0         |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-gettimersmetrics", 
            "text": "QueryAPI.jl#479-519  Calls the  timers-metrics  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getTimersMetrics"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_7", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_7", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_7", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  Exception  If there was an unexpected type error parsing response values", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_7", 
            "text": "{DataFrame}  A  DataFrame  with one column for each timer and metric.  Known columns include:   :Beacons  and  :PageLoad  will always be present.  :Sessions  and  :BounceRate  will be present if session tracking is enabled (on by default)  :DNS ,  :TCP ,  :SSL ,  :FirstByte ,  :DomLoad ,  :DomReady  and  :FirstLastByte  will be present if NavigationTiming is available (almost always available)  Custom Timers   Custom Metrics are included if defined and if they have data for the selected time period   The last row in the DataFrame is the latest value of the timer or metric.  All preceding rows are historic values over the time period broken down by a predefined time unit.\nFor example, for Last24Hours, there will be 1440 entries representing each minute in the 24 hour period.  julia  mPulseAPI.getTimersMetrics(token, appID)\n1441x16 DataFrames.DataFrame\n| Row  | PageLoad | DNS | DomLoad | DomReady | FirstByte | SSL | FirstLastByte | TCP | DOM Interactive | Sessions | BounceRate | Conversion | OrderTotal | Beacons |\n|------|----------|-----|---------|----------|-----------|-----|---------------|-----|-----------------|----------|------------|------------|------------|---------|\n| 1    | 3442     \u2502 46  \u2502 805     \u2502 3345     \u2502 732       \u2502 59  \u2502 2468          \u2502 36  \u2502 1696            \u2502 353      \u2502 34         \u2502 0.566572   \u2502 58652.0    \u2502 1808    \u2502\n| 2    | 3308     | 45  | 758     | 3173     | 705       | 56  | 2351          | 32  | 1620            | 331      | 30         | 2.1148     | 266219.0   | 1767    |\n| 3    | 3412     | 38  | 794     | 3287     | 726       | 69  | 2360          | 31  | 1707            | 346      | 29         | 1.44509    | 209205.0   | 1806    |\n| 4    | 3368     | 40  | 775     | 3250     | 701       | 51  | 2500          | 34  | 1670            | 354      | 32         | 2.25989    | 47354.0    | 1850    |\n| 5    | 3346     | 37  | 754     | 3222     | 691       | 61  | 2516          | 31  | 1624            | 326      | 30         | 2.76074    | 132915.0   | 1742    |\n| 6    | 3162     | 36  | 729     | 3040     | 665       | 86  | 2283          | 30  | 1611            | 382      | 28         | 1.57068    | 117284.0   | 1803    |\n| 7    | 3453     | 39  | 862     | 3320     | 787       | 64  | 2471          | 32  | 1772            | 356      | 33         | 2.52809    | 108045.0   | 1727    |\n| 8    | 3593     | 46  | 1028    | 3491     | 889       | 92  | 2495          | 33  | 1952            | 314      | 33         | 1.27389    | 150020.0   | 1715    |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-gethistogram", 
            "text": "QueryAPI.jl#585-599  Calls the  histogram  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getHistogram"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_8", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_8", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_8", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter  mPulseAPIResultFormatException  If the API response had a missing  series  element or data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_8", 
            "text": "{Dict}  A Julia  Dict  with the following string keys:   median::Int  The median value for values in the histogram in milliseconds  p95::Int  The 95th percentile value for values in the histogram in milliseconds  p98::Int  The 98th percentile value for values in the histogram in milliseconds  buckets::DataFrame  Buckets for the histogram.  These buckets are variable width. See below for a description.   julia  histo = mPulseAPI.getHistogram(token, appID)\nDict{AbstractString,Any} with 4 entries:\n   median   =  3439\n   p95      =  12843\n   p98      =  22816\n   buckets  =  117x3 DataFrames.DataFrame\u2026  The buckets  DataFrame  has the following columns:  :bucket_start ,  :bucket_end ,  :element_count  julia  histo[ buckets ]\n117x3 DataFrames.DataFrame\n| Row | bucket_start | bucket_end | element_count |\n|-----|--------------|------------|---------------|\n| 1   | 1            | 2          | 1             |\n| 2   | 3            | 4          | 3             |\n| 3   | 4            | 5          | 8             |\n| 4   | 5            | 6          | 7             |\n| 5   | 6            | 7          | 9             |\n| 6   | 7            | 8          | 8             |\n| 7   | 8            | 9          | 14            |\n| 8   | 9            | 10         | 13            |\n| 9   | 10           | 11         | 17            |\n| 10  | 11           | 12         | 15            |\n| 11  | 12           | 13         | 19            |\n| 12  | 13           | 14         | 18            |\n| 13  | 14           | 15         | 19            |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getsessionsoverpageloadtime", 
            "text": "QueryAPI.jl#619-621  Calls the  sessions-per-page-load-time  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getSessionsOverPageLoadTime"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_9", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_9", 
            "text": "filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_9", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a request parameter", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_9", 
            "text": "{DataFrame}  A julia  DataFrame  mapping the Sessions to a load time bucket:  julia  mPulseAPI.getSessionsOverPageLoadTime(token, appID)\n60x2 DataFrames.DataFrame\n| Row | t_done | Sessions   |\n|-----|--------|------------|\n| 1   | 210    | 72         |\n| 2   | 300    | 36         |\n| 3   | 400    | 72         |\n| 4   | 500    | 30         |\n| 5   | 550    | 66         |\n| 6   | 600    | 464        |\n| 7   | 700    | 30         |\n| 8   | 800    | 749        |\n| 9   | 900    | 709        |\n| 10  | 1050   | 1246       |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-getmetricoverpageloadtime", 
            "text": "QueryAPI.jl#646-670  Calls the  metric-per-page-load-time  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getMetricOverPageLoadTime"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_10", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_10", 
            "text": "metric::AbstractString  The name of the metric that we want data for.  If not specified, defaults to  BounceRate  filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_10", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a metric  mPulseAPIResultFormatException  If the API response had a missing  series  element or data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_10", 
            "text": "{DataFrame}  A julia  DataFrame  mapping the Metric to a load time bucket:  julia  mPulseAPI.getMetricOverPageLoadTime(token, appID)\n60x2 DataFrames.DataFrame\n| Row | t_done | BounceRate |\n|-----|--------|------------|\n| 1   | 210    | NA         |\n| 2   | 300    | 100.0      |\n| 3   | 400    | NA         |\n| 4   | 500    | 68.57      |\n| 5   | 550    | 12.65      |\n| 6   | 600    | 71.08      |\n| 7   | 700    | 68.57      |\n| 8   | 800    | 14.51      |\n| 9   | 900    | 20.83      |\n| 10  | 1050   | 24.58      |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-gettimerbyminute", 
            "text": "QueryAPI.jl#725-759  Calls the  by-minute  endpoint of the mPulse REST API with the passed in filters", 
            "title": "function getTimerByMinute"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_11", 
            "text": "token::AbstractString  The Repository authentication token fetched by calling  mPulseAPI.getRepositoryToken  appID::AbstractString  The App ID (formerly known as API key) for the app to query.  If you don't know the App ID, use\n  mPulseAPI.getRepositoryDomain  to fetch a domain and then inspect  domain[\"attributes\"][\"appID\"]", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_11", 
            "text": "timer::AbstractString   The name of the timer whose data we want.  If not specified, defaults to  PageLoad .  Other possible\n values are:   PageLoad  DNS  TCP  SSL  FirstByte  DomLoad  DomReady  FirstLastByte  all custom timers    filters::Dict   A dict of filters to pass to the mPulse Query API. For example  Dict(\"page-group\" =  \"foo-bar\") \n will filter results to the  foo-bar   page-group .  The resulting filters will be a merge of\n what is passed in and the default values with whatever is passed in taking precedence.  The default filters are:   Dict(\n     \"date-comparator\" =  \"Last24Hours\",\n     \"format\" =  \"json\",\n     \"series-format\" =  \"json\"\n )", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_11", 
            "text": "mPulseAPIAuthException  If the  token  is invalid or has expired.  mPulseAPIException  If the API returned a non-200 status.  Inspect  mPulseAPIException.response  for details about\nthe problem  mPulseAPIRequestException  If the API was unhappy with a timer  mPulseAPIResultFormatException  If the API response had a missing  series  element or data in an unexpected data type", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_11", 
            "text": "{DataFrame}  A julia  DataFrame  containing timeseries data for the median value of the timer and its margin of error.\nThe fields are:  :timestamp  in milliseconds since the UNIX epoch,  : TimerName  in milliseconds and  :moe  in milliseconds.  julia  data = mPulseAPI.getTimerByMinute(token, appID, timer= PageLoad )\n1440x3 DataFrames.DataFrame\n| Row  | timestamp     | PageLoad | moe  |\n|------|---------------|----------|------|\n| 1    | 1463452800000 | 3679     | 135  |\n| 2    | 1463452860000 | 3731     | 202  |\n| 3    | 1463452920000 | 3706     | 116  |\n| 4    | 1463452980000 | 3911     | 171  |\n| 5    | 1463453040000 | 3757     | 181  |\n| 6    | 1463453100000 | 3729     | 174  |\n| 7    | 1463453160000 | 3779     | 174  |\n| 8    | 1463453220000 | 3916     | 182  |", 
            "title": "Returns"
        }, 
        {
            "location": "/QueryAPI/index.html#function-mergemetrics", 
            "text": "QueryAPI.jl#824-832  Merge multiple similar  DataFrames  into a single  DataFrame  Use this method to merge the results from multiple calls to  getMetricOverPageLoadTime()  and  getSessionsOverPageLoadTime() .\nAll passed in  DataFrame s MUST contain a  :t_done  column.", 
            "title": "function mergeMetrics"
        }, 
        {
            "location": "/QueryAPI/index.html#arguments_12", 
            "text": "df1::DataFrame  The first  DataFrame  in the collection.  This method requires at least one  DataFrame  to be passed in.  df2::DataFrame...  One or more  DataFrame  to be merged together with the first one", 
            "title": "Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#optional-arguments_12", 
            "text": "keyField::Symbol=:t_done  The column name to join on.  Defaults to  :t_done  joinType::Symbol=:outer  The type of join to perform.  See the  kind  parameter in  ?join  for a list of supported join types", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/QueryAPI/index.html#throws_12", 
            "text": "KeyError  if the  keyField  column does not exist in all passed in  DataFrame s", 
            "title": "Throws"
        }, 
        {
            "location": "/QueryAPI/index.html#returns_12", 
            "text": "If only one  DataFrame  is passed in, it is returned as-is.  This is not a copy of the first DataFrame.  If multiple  DataFrame s are passed in, they are merged using an  outer  join on the  keyField  column, and the resulting  DataFrame  is returned.\n  Since we perform an outer join, rows in any of the DataFrames that do not have a matching  keyField  value found in other DataFrames will be filled with  NA   julia  sessions   = mPulseAPI.getSessionsOverPageLoadTime(token, appID);\njulia  bouncerate = mPulseAPI.getMetricOverPageLoadTime(token, appID);\njulia  conversion = mPulseAPI.getMetricOverPageLoadTime(token, appID, metric= Conversion );\n\njulia  mPulseAPI.mergeMetrics(sessions, bouncerate, conversion)\n65x4 DataFrames.DataFrame\n| Row | t_done | Sessions | BounceRate | Conversion |\n|-----|--------|----------|------------|------------|\n| 1   | 6      | 1        | NA         | NA         |\n| 2   | 10     | 2        | 50.0       | NA         |\n| 3   | 12     | 2        | 100.0      | NA         |\n| 4   | 17     | 1        | 100.0      | NA         |\n| 5   | 30     | 1        | 100.0      | NA         |\n| 6   | 34     | 1        | NA         | NA         |\n| 7   | 40     | 1        | 100.0      | NA         |\n| 8   | 60     | 2        | 100.0      | NA         |\n| 9   | 70     | 1        | 100.0      | NA         |\n| 10  | 120    | 2        | 100.0      | NA         |\n| 11  | 140    | 1        | NA         | NA         |\n| 12  | 170    | 1        | NA         | NA         |\n| 13  | 190    | 1        | 100.0      | NA         |\n| 14  | 230    | 1        | NA         | NA         |\n...\n| 44  | 3750   | 8332     | 29.5915    | 2.25043    |\n| 45  | 3950   | 7957     | 31.7591    | 2.08962    |\n| 46  | 4200   | 7342     | 34.9953    | 2.02302    |\n| 47  | 4500   | 6783     | 37.0922    | 1.59947    |\n| 48  | 4800   | 6140     | 40.2336    | 1.67129    |\n| 49  | 5100   | 5530     | 42.2393    | 1.32839    |", 
            "title": "Returns"
        }, 
        {
            "location": "/exceptions/index.html", 
            "text": "Exceptions\n\n\n\n\nmPulseAPIException\n\n\nmPulseAPIAuthException\n\n\nmPulseAPIRequestException\n\n\nmPulseAPIResultFormatException\n\n\n\n\nExported Types\n\n\ndatatype \nmPulseAPIException\n\n\nexceptions.jl#20-23\n\n\nThrown when the REST API has a problem and returns something other than a 2xx response.\n\n\nFields\n\n\n\n\nmsg::AbstractString\n\n\nThe error message\n\n\nresponse::Response\n\n\nThe response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\n\n\n\n\n\ndatatype \nmPulseAPIAuthException\n\n\nexceptions.jl#33-35\n\n\nThrown when the token used to authenticate with the REST API is invalid or has expired\n\n\nFields\n\n\n\n\nresponse::Response\n\n\nThe response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\n\n\n\n\n\ndatatype \nmPulseAPIRequestException\n\n\nexceptions.jl#57-63\n\n\nThrown when a request parameter is invalid\n\n\nFields\n\n\n\n\nmsg::AbstractString\n\n\nThe error message sent from the mPulse server\n\n\ncode::AbstractString\n\n\nThe error code sent from the mPulse server\n\n\nparameter::AbstractString\n\n\nThe parameter that the mPulse server had a problem with\n\n\nvalue::AbstractString\n\n\nThe value of the parameter that the mPulse server had a problem with\n\n\nresponse::Response\n\n\nThe response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.\n\n\n\n\n\n\ndatatype \nmPulseAPIResultFormatException\n\n\nexceptions.jl#76-79\n\n\nThrown when the result returned by an API call was not in the expected format\n\n\nFields\n\n\n\n\nmsg::AbstractString\n\n\nThe error message\n\n\ndata::Any\n\n\nThe actual data returned", 
            "title": "Exceptions"
        }, 
        {
            "location": "/exceptions/index.html#exceptions", 
            "text": "mPulseAPIException  mPulseAPIAuthException  mPulseAPIRequestException  mPulseAPIResultFormatException", 
            "title": "Exceptions"
        }, 
        {
            "location": "/exceptions/index.html#exported-types", 
            "text": "", 
            "title": "Exported Types"
        }, 
        {
            "location": "/exceptions/index.html#datatype-mpulseapiexception", 
            "text": "exceptions.jl#20-23  Thrown when the REST API has a problem and returns something other than a 2xx response.", 
            "title": "datatype mPulseAPIException"
        }, 
        {
            "location": "/exceptions/index.html#fields", 
            "text": "msg::AbstractString  The error message  response::Response  The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.", 
            "title": "Fields"
        }, 
        {
            "location": "/exceptions/index.html#datatype-mpulseapiauthexception", 
            "text": "exceptions.jl#33-35  Thrown when the token used to authenticate with the REST API is invalid or has expired", 
            "title": "datatype mPulseAPIAuthException"
        }, 
        {
            "location": "/exceptions/index.html#fields_1", 
            "text": "response::Response  The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.", 
            "title": "Fields"
        }, 
        {
            "location": "/exceptions/index.html#datatype-mpulseapirequestexception", 
            "text": "exceptions.jl#57-63  Thrown when a request parameter is invalid", 
            "title": "datatype mPulseAPIRequestException"
        }, 
        {
            "location": "/exceptions/index.html#fields_2", 
            "text": "msg::AbstractString  The error message sent from the mPulse server  code::AbstractString  The error code sent from the mPulse server  parameter::AbstractString  The parameter that the mPulse server had a problem with  value::AbstractString  The value of the parameter that the mPulse server had a problem with  response::Response  The response object from the REST API call.  You can inspect headers, data, cookies, redirects, and the initiating request.", 
            "title": "Fields"
        }, 
        {
            "location": "/exceptions/index.html#datatype-mpulseapiresultformatexception", 
            "text": "exceptions.jl#76-79  Thrown when the result returned by an API call was not in the expected format", 
            "title": "datatype mPulseAPIResultFormatException"
        }, 
        {
            "location": "/exceptions/index.html#fields_3", 
            "text": "msg::AbstractString  The error message  data::Any  The actual data returned", 
            "title": "Fields"
        }, 
        {
            "location": "/cache_utilities/index.html", 
            "text": "Internal Cache Utilities\n\n\n\n\nclearDomainCache\n\n\nclearTenantCache\n\n\nclearTokenCache\n\n\n\n\nNamespaced Functions\n\n\n\n\nNote\n\n\nThe following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the \nmPulseAPI.\n namespace.\n\n\n\n\nfunction \nclearDomainCache\n\n\ncache_utilities.jl#87-137\n\n\nExpire an entry from the domain cache.  Use this if the domain has changed.\n\n\nOptional Arguments\n\n\n\n\ndomainID::Int64\n\n\nThe ID of the domain to expire.\n\n\nappID::AbstractString\n\n\nThe App ID (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.\n\n\nappName::AbstractString\n\n\nThe App name in mPulse.  This can be got from the mPulse domain configuration dialog.\n\n\n\n\nReturns\n\n\n\n\ntrue\n\n\non success\n\n\nfalse\n\n\nif the entry was not in cache\n\n\n\n\n\n\nfunction \nclearTenantCache\n\n\ncache_utilities.jl#108-137\n\n\nExpire an entry from the tenant cache.  Use this if the tenant has changed.\n\n\nOptional Arguments\n\n\n\n\ntenantID::Int64\n\n\nThe ID of the tenant to expire.\n\n\nname::AbstractString\n\n\nThe Tenant name in mPulse.  This is got from the mPulse domain configuration dialog.\n\n\n\n\nReturns\n\n\n\n\ntrue\n\n\non success\n\n\nfalse\n\n\nif the entry was not in cache\n\n\n\n\n\n\nfunction \nclearTokenCache\n\n\ncache_utilities.jl#127-137\n\n\nExpire an entry from the token cache.  Use this if the token associated with this tenant is no longer valid.\n\n\nArguments\n\n\n\n\ntenant::AbstractString\n\n\nThe tenant name whose token needs to be expired\n\n\n\n\nReturns\n\n\n\n\ntrue\n\n\non success\n\n\nfalse\n\n\nif the entry was not in cache", 
            "title": "Internal Cache Utilities"
        }, 
        {
            "location": "/cache_utilities/index.html#internal-cache-utilities", 
            "text": "clearDomainCache  clearTenantCache  clearTokenCache", 
            "title": "Internal Cache Utilities"
        }, 
        {
            "location": "/cache_utilities/index.html#namespaced-functions", 
            "text": "Note  The following methods are not exported by default. You may use them by explicitly\nimporting them or by prefixing them with the  mPulseAPI.  namespace.", 
            "title": "Namespaced Functions"
        }, 
        {
            "location": "/cache_utilities/index.html#function-cleardomaincache", 
            "text": "cache_utilities.jl#87-137  Expire an entry from the domain cache.  Use this if the domain has changed.", 
            "title": "function clearDomainCache"
        }, 
        {
            "location": "/cache_utilities/index.html#optional-arguments", 
            "text": "domainID::Int64  The ID of the domain to expire.  appID::AbstractString  The App ID (formerly known as API key) associated with the domain.  This is available from the mPulse domain configuration dialog.  appName::AbstractString  The App name in mPulse.  This can be got from the mPulse domain configuration dialog.", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/cache_utilities/index.html#returns", 
            "text": "true  on success  false  if the entry was not in cache", 
            "title": "Returns"
        }, 
        {
            "location": "/cache_utilities/index.html#function-cleartenantcache", 
            "text": "cache_utilities.jl#108-137  Expire an entry from the tenant cache.  Use this if the tenant has changed.", 
            "title": "function clearTenantCache"
        }, 
        {
            "location": "/cache_utilities/index.html#optional-arguments_1", 
            "text": "tenantID::Int64  The ID of the tenant to expire.  name::AbstractString  The Tenant name in mPulse.  This is got from the mPulse domain configuration dialog.", 
            "title": "Optional Arguments"
        }, 
        {
            "location": "/cache_utilities/index.html#returns_1", 
            "text": "true  on success  false  if the entry was not in cache", 
            "title": "Returns"
        }, 
        {
            "location": "/cache_utilities/index.html#function-cleartokencache", 
            "text": "cache_utilities.jl#127-137  Expire an entry from the token cache.  Use this if the token associated with this tenant is no longer valid.", 
            "title": "function clearTokenCache"
        }, 
        {
            "location": "/cache_utilities/index.html#arguments", 
            "text": "tenant::AbstractString  The tenant name whose token needs to be expired", 
            "title": "Arguments"
        }, 
        {
            "location": "/cache_utilities/index.html#returns_2", 
            "text": "true  on success  false  if the entry was not in cache", 
            "title": "Returns"
        }
    ]
}